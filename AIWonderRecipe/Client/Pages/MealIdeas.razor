@page "/mealideas"
@using AIWonderRecipe.Shared
@using System.Text.Json
@inject NavigationManager navigationManager
@inject HttpClient Http;

<PageTitle>Meal Ideas</PageTitle>
@if (loaded == true)
{
    <div class="container">
        <h3 class="mt-5">Choose a meal to make!</h3>
        <div class="list-group">
            @foreach (var idea in ideas)
            {
                <button @onclick="()=> GetRecipe(idea.Index)" class="list-group-item list-group-item-action list-group-item-success p-2">
                    <div class="d-flex w-100 justify-content-sm-between">
                        <h2 class="mb-1 fw-bold">@idea.Title</h2>
                    </div>
                        <p class="mb-1">@idea.Description</p>
                </button>
            }
        </div>
    </div>

}
else
{
    <div class="container">
        <h3>Loading . . .</h3>

    </div>
}
@code {
    private List<Idea> ideas = new List<Idea>();
    private bool loaded = false;

    [CascadingParameter]
    private RecipeState? rState { get; set; }

    private readonly JsonSerializerOptions _jsonOptions = new()
        {
            PropertyNameCaseInsensitive = true,
            PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
            DefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull
        };
    protected override void OnInitialized()
    {
        if (rState is null)
        {
            navigationManager.NavigateTo("/", forceLoad: true);
            return;
        }
        if (rState.Ideas.Count < 1)
        {
            GetIdeas();
        }
        {
            loaded = true;
            ideas = rState.Ideas;
            StateHasChanged();
        }
    }
    private async void GetIdeas()
    {
        string baseuri = "Recipe/GetRecipeIdeas";
        loaded = false;
        RecipeParms recipeParms = new()
            {
                MealTime = rState.MealTime,
                Ingredients = rState.Ingredients
            };
        //call web api controller.
        try
        {
            HttpResponseMessage response = await Http.PostAsJsonAsync(baseuri, recipeParms, _jsonOptions);
            response.EnsureSuccessStatusCode();
            ideas = (await response.Content.ReadFromJsonAsync<List<Idea>>())!;
            rState.Ideas = ideas;
            loaded = true;
            StateHasChanged();
        }
        catch (Exception)
        {

            Console.WriteLine("Error: Could not fetch recipe ideas.");
        }
        
    }

    private void GetRecipe(int index)
    {
        //navigate to recipe page. $ allows for varible in string.
        navigationManager.NavigateTo($"/mealrecipe/{index}");
    }
}


